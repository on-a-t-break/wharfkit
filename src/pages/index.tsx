import { useEffect, useState, useContext, useRef } from 'react';
import { SessionContext } from '../context';
import Head from 'next/head';
import Link from 'next/link';

import styled from '@emotion/styled';
import styles from '../styles/Home.module.css';

import truncStrMid from '../utils/truncStrMid';

import Layout from '../layouts'
import { Container, Typography, Button, Stack } from '@mui/material';
import Toast from '../components/Toast';


export const StyledButton = styled(Button)`
  background-color: var(--blue-color-5);
  color: var(--blue-color-11);
  margin: 2.888rem 0.444rem 0 0.444rem;
  width: 20rem;
  min-height: 4rem;
  font-size: 1.1rem;
  box-shadow: 0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0);
  &:hover {
    background-color: var(--blue-color-3);
    color: var(--blue-color-9);
  }
`;

export const StyledInput = styled.input`
  background-color: var(--blue-color-5);
  color: var(--blue-color-11);
  border: 1px solid var(--blue-color-9);
  border-radius: 0.5rem;
  font-family: 'Roboto', sans-serif;
  font-size: 1.5rem;
  font-weight: 500;
  height: 2rem;
  margin: 0.444888rem;
  padding: 0.444888rem;
  width: calc(88.8px + 4.44px);
  pointer-events: all;
  &:hover {
    background-color: var(--blue-color-3);
    color: var(--blue-color-9);
  }
`;
type ToastProps<T> = {
  response: T;
  open: boolean;
  setOpen: (open: boolean) => void;
  severity: "success" | "error";
  vert: "top" | "bottom";
  horz: "left" | "center" | "right";
  children: string;
};
const Home = (): JSX.Element => {
  const { session, login, logout, account, setAccount } = useContext(SessionContext);
  const [accountDetails, setAccountDetails] = useState<any | null>(null);
  const [txAmt, setTxAmt] = useState<number>(0.444);
  const [txStatus, setTxStatus] = useState<any>(null);
  const [open, setOpen] = useState(false);
  let inputRef: any = useRef(null)

  useEffect(() => {
    setAccountDetails(account);

    inputRef.current?.addEventListener("click", function () {
      console.log("clicked")
    })

  }, [account]);

  const handleChange = (e: any) => {
    setTxAmt(e.target.value);
  };

  const handleLogin = async () => {
    try {
      if (!session) {
        await login().then((response: any) => {
          console.log('Login response:', response);
        });
        setAccountDetails(account);
      }
    } catch (error) {
      console.log('Error occurred during login:', error);
    }

  };

  const handleLogout = async () => {
    await logout();
    setAccount(null);
  };

  const handleTransact = () => {
    if (!session) {
      console.log('Session is not defined');
      return;
    }
    const action = {
      account: 'eosio.token',
      name: 'transfer',
      authorization: [session.permissionLevel],
      data: {
        from: session.actor,
        to: 'donate2.nftg',
        quantity: `${txAmt.toFixed(8)} WAX`,
        memo: 'For NFTG Stream Giveaway Wallet',
      },
    };
    session
      .transact({ action }, { broadcast: true })
      .then((response: any) => {
        console.log('transact response:', response);
        setTxStatus(response);
        setOpen(true);
      })
      .catch((e: any) => {
        console.log('error caught in transact', e);
      });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main id="app" className={styles.main}>
        <Typography variant="h1" component="span" gutterBottom >
          <h1 className={styles.title}>
            {accountDetails ? `Hi, ${accountDetails?.actor}!` : ''}   <br />
            Welcome to <Link target={'_blank'} href="https://nextjs.org">Next.js </Link>
            & <Link target={'_blank'} style={{ color: '#1cb095' }} href="https://wharfkit.com/">Wharf!</Link>
          </h1>
        </Typography>
        {!accountDetails ? <StyledButton id="login-button" className='btn btn-primary' variant='contained' onClick={() => handleLogin()}>Login</StyledButton> :
          <StyledButton id="logout-button" className='btn btn-primary' variant='contained' onClick={() => handleLogout()}>Logout</StyledButton>}

        {!accountDetails ? null : <StyledButton id="send-button" className='btn btn-primary'
          onClick={() => handleTransact()}>Send <StyledInput aria-label="Tip Amount" ref={inputRef} onClick={(e) => e.stopPropagation()} type="number" onChange={(e) => handleChange(e)} value={txAmt} step={1} min={0.444} /> WAX to NFTG</StyledButton>}
        <div style={{ marginTop: '40px' }}>
          <Button variant="outlined">
            <Link href="/otherPage">Go to the Other Page </Link>
          </Button>
        </div>
        <Stack spacing={2} sx={{ width: '100%' }}>
          <Toast
            response={txStatus}
            open={open}
            setOpen={setOpen}
            severity={
              txStatus?.response?.processed?.receipt?.status === "executed"
                ? "success"
                : "error"
            }
            vert="top"
            horz="right"
          >
            {txStatus?.response?.transaction_id ? <Link style={{textDecoration: 'underline'}} target={'_blank'} href={`https://waxblock.io/transaction/${txStatus.response.transaction_id}`}>
              {truncStrMid(txStatus.response.transaction_id,4)}
            </Link> : ''}


          </Toast>

        </Stack>
      </main>
    </div>
  )
}

Home.getLayout = function getLayout(page: any) {
  return <Layout simpleFooter simpleHeader>{page}</Layout>;
};

export default Home